y=rnorm(nobs,mean=b0+b1*x+b2*u,sd=sqrt(var.e))
res=lm(y~x)
res$coefficients[2]
#get IV
tmp=lm(y~z)
slope.yz=tmp$coefficient[2]
tmp=lm(x~z)
slope.xz=tmp$coefficient[2]
slope.yz/slope.xz
#the theoretical estimate is
num=b1*((g1^2)*var.u+var.delta)+b2*g1*var.u
denom=(g1^2)*var.u+var.delta
num/denom
var.u=2
var.delta=3
var.e=5
var.epsilon=0.1
u=rnorm(nobs,mean=-1,sd=sqrt(var.u))
x=rnorm(nobs,mean=g0+g1*u,sd=sqrt(var.delta))
z=rnorm(nobs,mean=a0+a1*x,sd=sqrt(var.epsilon))
y=rnorm(nobs,mean=b0+b1*x+b2*u,sd=sqrt(var.e))
res=lm(y~x)
res$coefficients[2]
#get IV
tmp=lm(y~z)
slope.yz=tmp$coefficient[2]
tmp=lm(x~z)
slope.xz=tmp$coefficient[2]
slope.yz/slope.xz
#the theoretical estimate is
num=b1*((g1^2)*var.u+var.delta)+b2*g1*var.u
denom=(g1^2)*var.u+var.delta
num/denom
var.u=2
var.delta=3
var.e=5
var.epsilon=0.1
u=rnorm(nobs,mean=-1,sd=sqrt(var.u))
x=rnorm(nobs,mean=g0+g1*u,sd=sqrt(var.delta))
z=rnorm(nobs,mean=a0+a1*x,sd=sqrt(var.epsilon))
y=rnorm(nobs,mean=b0+b1*x+b2*u,sd=sqrt(var.e))
res=lm(y~x)
res$coefficients[2]
#get IV
tmp=lm(y~z)
slope.yz=tmp$coefficient[2]
tmp=lm(x~z)
slope.xz=tmp$coefficient[2]
slope.yz/slope.xz
#the theoretical estimate is
num=b1*((g1^2)*var.u+var.delta)+b2*g1*var.u
denom=(g1^2)*var.u+var.delta
num/denom
var.u=5
var.delta=3
var.e=0.5
var.epsilon=0.1
u=rnorm(nobs,mean=-1,sd=sqrt(var.u))
x=rnorm(nobs,mean=g0+g1*u,sd=sqrt(var.delta))
z=rnorm(nobs,mean=a0+a1*x,sd=sqrt(var.epsilon))
y=rnorm(nobs,mean=b0+b1*x+b2*u,sd=sqrt(var.e))
res=lm(y~x)
res$coefficients[2]
#get IV
tmp=lm(y~z)
slope.yz=tmp$coefficient[2]
tmp=lm(x~z)
slope.xz=tmp$coefficient[2]
slope.yz/slope.xz
#the theoretical estimate is
num=b1*((g1^2)*var.u+var.delta)+b2*g1*var.u
denom=(g1^2)*var.u+var.delta
num/denom
var.u=5
var.delta=3
var.e=0.5
var.epsilon=0.1
u=rnorm(nobs,mean=-1,sd=sqrt(var.u))
x=rnorm(nobs,mean=g0+g1*u,sd=sqrt(var.delta))
z=rnorm(nobs,mean=a0+a1*x,sd=sqrt(var.epsilon))
y=rnorm(nobs,mean=b0+b1*x+b2*u,sd=sqrt(var.e))
res=lm(y~x)
res$coefficients[2]
#get IV
tmp=lm(y~z)
slope.yz=tmp$coefficient[2]
tmp=lm(x~z)
slope.xz=tmp$coefficient[2]
slope.yz/slope.xz
#the theoretical estimate is
num=b1*((g1^2)*var.u+var.delta)+b2*g1*var.u
denom=(g1^2)*var.u+var.delta
num/denom
var.u=5
var.delta=3
var.e=0.5
var.epsilon=0.1
u=rnorm(nobs,mean=-1,sd=sqrt(var.u))
x=rnorm(nobs,mean=g0+g1*u,sd=sqrt(var.delta))
z=rnorm(nobs,mean=a0+a1*x,sd=sqrt(var.epsilon))
y=rnorm(nobs,mean=b0+b1*x+b2*u,sd=sqrt(var.e))
res=lm(y~x)
res$coefficients[2]
#get IV
tmp=lm(y~z)
slope.yz=tmp$coefficient[2]
tmp=lm(x~z)
slope.xz=tmp$coefficient[2]
slope.yz/slope.xz
#the theoretical estimate is
num=b1*((g1^2)*var.u+var.delta)+b2*g1*var.u
denom=(g1^2)*var.u+var.delta
num/denom
var.u=5
var.delta=3
var.e=0.5
var.epsilon=0.1
u=rnorm(nobs,mean=-1,sd=sqrt(var.u))
x=rnorm(nobs,mean=g0+g1*u,sd=sqrt(var.delta))
z=rnorm(nobs,mean=a0+a1*x,sd=sqrt(var.epsilon))
y=rnorm(nobs,mean=b0+b1*x+b2*u,sd=sqrt(var.e))
res=lm(y~x)
res$coefficients[2]
#get IV
tmp=lm(y~z)
slope.yz=tmp$coefficient[2]
tmp=lm(x~z)
slope.xz=tmp$coefficient[2]
slope.yz/slope.xz
#the theoretical estimate is
num=b1*((g1^2)*var.u+var.delta)+b2*g1*var.u
denom=(g1^2)*var.u+var.delta
num/denom
var.u=5
var.delta=0.1
var.e=0.5
var.epsilon=0.1
u=rnorm(nobs,mean=-1,sd=sqrt(var.u))
x=rnorm(nobs,mean=g0+g1*u,sd=sqrt(var.delta))
z=rnorm(nobs,mean=a0+a1*x,sd=sqrt(var.epsilon))
y=rnorm(nobs,mean=b0+b1*x+b2*u,sd=sqrt(var.e))
res=lm(y~x)
res$coefficients[2]
#get IV
tmp=lm(y~z)
slope.yz=tmp$coefficient[2]
tmp=lm(x~z)
slope.xz=tmp$coefficient[2]
slope.yz/slope.xz
#the theoretical estimate is
num=b1*((g1^2)*var.u+var.delta)+b2*g1*var.u
denom=(g1^2)*var.u+var.delta
num/denom
var.u=5
var.delta=0.1
var.e=0.5
var.epsilon=0.1
u=rnorm(nobs,mean=-1,sd=sqrt(var.u))
x=rnorm(nobs,mean=g0+g1*u,sd=sqrt(var.delta))
z=rnorm(nobs,mean=a0+a1*x,sd=sqrt(var.epsilon))
y=rnorm(nobs,mean=b0+b1*x+b2*u,sd=sqrt(var.e))
res=lm(y~x)
res$coefficients[2]
#get IV
tmp=lm(y~z)
slope.yz=tmp$coefficient[2]
tmp=lm(x~z)
slope.xz=tmp$coefficient[2]
slope.yz/slope.xz
#the theoretical estimate is
num=b1*((g1^2)*var.u+var.delta)+b2*g1*var.u
denom=(g1^2)*var.u+var.delta
num/denom
var.u=5
var.delta=0.1
var.e=0.5
var.epsilon=0.1
u=rnorm(nobs,mean=-1,sd=sqrt(var.u))
x=rnorm(nobs,mean=g0+g1*u,sd=sqrt(var.delta))
z=rnorm(nobs,mean=a0+a1*x,sd=sqrt(var.epsilon))
y=rnorm(nobs,mean=b0+b1*x+b2*u,sd=sqrt(var.e))
res=lm(y~x)
res$coefficients[2]
#get IV
tmp=lm(y~z)
slope.yz=tmp$coefficient[2]
tmp=lm(x~z)
slope.xz=tmp$coefficient[2]
slope.yz/slope.xz
#the theoretical estimate is
num=b1*((g1^2)*var.u+var.delta)+b2*g1*var.u
denom=(g1^2)*var.u+var.delta
num/denom
var.u=5
var.delta=0.1
var.e=0.5
var.epsilon=0.1
u=rnorm(nobs,mean=-1,sd=sqrt(var.u))
x=rnorm(nobs,mean=g0+g1*u,sd=sqrt(var.delta))
z=rnorm(nobs,mean=a0+a1*x,sd=sqrt(var.epsilon))
y=rnorm(nobs,mean=b0+b1*x+b2*u,sd=sqrt(var.e))
res=lm(y~x)
res$coefficients[2]
#get IV
tmp=lm(y~z)
slope.yz=tmp$coefficient[2]
tmp=lm(x~z)
slope.xz=tmp$coefficient[2]
slope.yz/slope.xz
#the theoretical estimate is
num=b1*((g1^2)*var.u+var.delta)+b2*g1*var.u
denom=(g1^2)*var.u+var.delta
num/denom
rm(list=ls(all=TRUE))
set.seed(1)
b0=0
b1=3
b2=1
g0=0
g1=1
g2=1
nobs=10000
a0=0
a1=1
var.u=5
var.delta=0.1
var.e=0.5
var.epsilon=0.1
u=rnorm(nobs,mean=-1,sd=sqrt(var.u))
x=rnorm(nobs,mean=g0+g1*u,sd=sqrt(var.delta))
z=rnorm(nobs,mean=a0+a1*x,sd=sqrt(var.epsilon))
y=rnorm(nobs,mean=b0+b1*x+b2*u,sd=sqrt(var.e))
res=lm(y~x)
res$coefficients[2]
#get IV
tmp=lm(y~z)
slope.yz=tmp$coefficient[2]
tmp=lm(x~z)
slope.xz=tmp$coefficient[2]
slope.yz/slope.xz
#the theoretical estimate is
num=b1*((g1^2)*var.u+var.delta)+b2*g1*var.u
denom=(g1^2)*var.u+var.delta
num/denom
rm(list=ls(all=TRUE))
set.seed(1)
b0=0
b1=-2
b2=1
g0=0
g1=1
g2=1
nobs=10000
a0=0
a1=1
var.u=5
var.delta=0.1
var.e=0.5
var.epsilon=0.1
u=rnorm(nobs,mean=-1,sd=sqrt(var.u))
x=rnorm(nobs,mean=g0+g1*u,sd=sqrt(var.delta))
z=rnorm(nobs,mean=a0+a1*x,sd=sqrt(var.epsilon))
y=rnorm(nobs,mean=b0+b1*x+b2*u,sd=sqrt(var.e))
res=lm(y~x)
res$coefficients[2]
#get IV
tmp=lm(y~z)
slope.yz=tmp$coefficient[2]
tmp=lm(x~z)
slope.xz=tmp$coefficient[2]
slope.yz/slope.xz
#the theoretical estimate is
num=b1*((g1^2)*var.u+var.delta)+b2*g1*var.u
denom=(g1^2)*var.u+var.delta
num/denom
rm(list=ls(all=TRUE))
set.seed(1)
b0=0
b1=1
b2=1
g0=0
g1=1
g2=1
nobs=10000
var.z=2
var.u=0.4
var.epsilon=5
var.e=0.1
z=rnorm(nobs,mean=2,sd=sqrt(var.z))
u=rnorm(nobs,mean=-1,sd=var.u)
x=rnorm(nobs,mean=g0+g1*z+g2*u,sd=sqrt(var.epsilon))
y=rnorm(nobs,mean=b0+b1*x+b2*u,sd=sqrt(var.e))
res=lm(y~x)
res$coefficients[2]
#get IV
tmp=lm(y~z)
slope.yz=tmp$coefficient[2]
tmp=lm(x~z)
slope.xz=tmp$coefficient[2]
slope.yz/slope.xz
var.z=0.2
var.u=5
var.epsilon=5
var.e=0.1
z=rnorm(nobs,mean=2,sd=sqrt(var.z))
u=rnorm(nobs,mean=-1,sd=var.u)
x=rnorm(nobs,mean=g0+g1*z+g2*u,sd=sqrt(var.epsilon))
y=rnorm(nobs,mean=b0+b1*x+b2*u,sd=sqrt(var.e))
res=lm(y~x)
res$coefficients[2]
#get IV
tmp=lm(y~z)
slope.yz=tmp$coefficient[2]
tmp=lm(x~z)
slope.xz=tmp$coefficient[2]
slope.yz/slope.xz
var.z=0.2
var.u=5
var.epsilon=5
var.e=0.1
z=rnorm(nobs,mean=2,sd=sqrt(var.z))
u=rnorm(nobs,mean=-1,sd=var.u)
x=rnorm(nobs,mean=g0+g1*z+g2*u,sd=sqrt(var.epsilon))
y=rnorm(nobs,mean=b0+b1*x+b2*u,sd=sqrt(var.e))
res=lm(y~x)
res$coefficients[2]
#get IV
tmp=lm(y~z)
slope.yz=tmp$coefficient[2]
tmp=lm(x~z)
slope.xz=tmp$coefficient[2]
slope.yz/slope.xz
var.z=0.2
var.u=5
var.epsilon=5
var.e=0.1
z=rnorm(nobs,mean=2,sd=sqrt(var.z))
u=rnorm(nobs,mean=-1,sd=var.u)
x=rnorm(nobs,mean=g0+g1*z+g2*u,sd=sqrt(var.epsilon))
y=rnorm(nobs,mean=b0+b1*x+b2*u,sd=sqrt(var.e))
res=lm(y~x)
res$coefficients[2]
#get IV
tmp=lm(y~z)
slope.yz=tmp$coefficient[2]
tmp=lm(x~z)
slope.xz=tmp$coefficient[2]
slope.yz/slope.xz
var.z=0.2
var.u=5
var.epsilon=5
var.e=0.1
z=rnorm(nobs,mean=2,sd=sqrt(var.z))
u=rnorm(nobs,mean=-1,sd=var.u)
x=rnorm(nobs,mean=g0+g1*z+g2*u,sd=sqrt(var.epsilon))
y=rnorm(nobs,mean=b0+b1*x+b2*u,sd=sqrt(var.e))
res=lm(y~x)
res$coefficients[2]
#get IV
tmp=lm(y~z)
slope.yz=tmp$coefficient[2]
tmp=lm(x~z)
slope.xz=tmp$coefficient[2]
slope.yz/slope.xz
var.z=0.2
var.u=5
var.epsilon=5
var.e=0.1
z=rnorm(nobs,mean=2,sd=sqrt(var.z))
u=rnorm(nobs,mean=-1,sd=var.u)
x=rnorm(nobs,mean=g0+g1*z+g2*u,sd=sqrt(var.epsilon))
y=rnorm(nobs,mean=b0+b1*x+b2*u,sd=sqrt(var.e))
res=lm(y~x)
res$coefficients[2]
#get IV
tmp=lm(y~z)
slope.yz=tmp$coefficient[2]
tmp=lm(x~z)
slope.xz=tmp$coefficient[2]
slope.yz/slope.xz
var.z=0.2
var.u=5
var.epsilon=5
var.e=0.1
z=rnorm(nobs,mean=2,sd=sqrt(var.z))
u=rnorm(nobs,mean=-1,sd=var.u)
x=rnorm(nobs,mean=g0+g1*z+g2*u,sd=sqrt(var.epsilon))
y=rnorm(nobs,mean=b0+b1*x+b2*u,sd=sqrt(var.e))
res=lm(y~x)
res$coefficients[2]
#get IV
tmp=lm(y~z)
slope.yz=tmp$coefficient[2]
tmp=lm(x~z)
slope.xz=tmp$coefficient[2]
slope.yz/slope.xz
var.z=0.2
var.u=5
var.epsilon=5
var.e=0.1
z=rnorm(nobs,mean=2,sd=sqrt(var.z))
u=rnorm(nobs,mean=-1,sd=var.u)
x=rnorm(nobs,mean=g0+g1*z+g2*u,sd=sqrt(var.epsilon))
y=rnorm(nobs,mean=b0+b1*x+b2*u,sd=sqrt(var.e))
res=lm(y~x)
res$coefficients[2]
#get IV
tmp=lm(y~z)
slope.yz=tmp$coefficient[2]
tmp=lm(x~z)
slope.xz=tmp$coefficient[2]
slope.yz/slope.xz
var.z=0.2
var.u=5
var.epsilon=0.3
var.e=0.1
z=rnorm(nobs,mean=2,sd=sqrt(var.z))
u=rnorm(nobs,mean=-1,sd=var.u)
x=rnorm(nobs,mean=g0+g1*z+g2*u,sd=sqrt(var.epsilon))
y=rnorm(nobs,mean=b0+b1*x+b2*u,sd=sqrt(var.e))
res=lm(y~x)
res$coefficients[2]
#get IV
tmp=lm(y~z)
slope.yz=tmp$coefficient[2]
tmp=lm(x~z)
slope.xz=tmp$coefficient[2]
slope.yz/slope.xz
nparam=10
nobs=1000
xmat=matrix(NA,nobs,nparam)
xmat[,1]=rnorm(nobs,mean=0,sd=1)
for (i in 2:nparam){
xmat[,i]=rnorm(nobs,mean=xmat[,i-1],sd=1)
}
cor(xmat)
nparam=10
nobs=10000
xmat=matrix(NA,nobs,nparam)
xmat[,1]=rnorm(nobs,mean=0,sd=1)
for (i in 2:nparam){
xmat[,i]=rnorm(nobs,mean=xmat[,i-1],sd=1)
}
round(cor(xmat),2)
rm(list=ls(all=TRUE))
set.seed(8)
nparam=10
nobs=10000
xmat=matrix(NA,nobs,nparam)
xmat[,1]=rnorm(nobs,mean=0,sd=1)
for (i in 2:nparam){
xmat[,i]=rnorm(nobs,mean=xmat[,i-1],sd=1)
}
round(cor(xmat),2)
#standardize
med1=apply(xmat,2,mean)
sd1=apply(xmat,2,sd)
xmat1=xmat
for (i in 1:nparam){
xmat1[,i]=(xmat[,i]-med1[i])/sd1[i]
}
k=qr(xmat)
str(k)
?qr
Q=qr.Q(k)
R=qr.R(k)
k=qr(xmat)
Q=qr.Q(k)
R=qr.R(k)
plot(xmat,Q%*%R)
unique(xmat-(Q%*%R))
hist(xmat-(Q%*%R))
round(cor(Q),2)
rm(list=ls(all=TRUE))
library('Rcpp')
library('MCMCpack')
set.seed(1)
setwd('U:\\GIT_models\\cluster_tsegments_loc')
sourceCpp('aux1.cpp')
source('gibbs functions.R')
dat=read.csv('fake data.csv',as.is=T)
dat=data.matrix(dat)
n=rowSums(dat)
nobs=nrow(dat)
nloc=ncol(dat)
lo=0.000000000000001
#priors
psi=0.01
gamma1=0.1
#starting values
nclustmax=20
z=sample(1:nclustmax,size=nobs,replace=T)
theta=matrix(1/nloc,nclustmax,nloc)
phi=rep(1/nclustmax,nclustmax)
#store results
ngibbs=1000
store.phi=matrix(NA,ngibbs,nclustmax)
store.z=matrix(NA,ngibbs,nobs)
store.theta=matrix(NA,ngibbs,nclustmax*nloc)
store.loglikel=matrix(NA,ngibbs,1)
#gibbs sampler
nburn=ngibbs/2
v=sample.v(z=z,nclustmax=nclustmax,gamma1=gamma1)
library(microbenchmark)
microbenchmark(
z=sample.z(dat=dat,theta=theta,phi=phi,
nobs=nobs,nclustmax=nclustmax,nloc=nloc,z=z,n=n),
v=sample.v(z=z,nclustmax=nclustmax,gamma1=gamma1),
phi=GetPhi(vec=c(v,1),nclustmax=nclustmax),
theta=sample.theta(dat=dat,nclustmax=nclustmax,nloc=nloc,z=z,psi=psi)
#to avoid numerical issues
)
