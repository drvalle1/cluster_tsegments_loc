library('Rcpp')
library('MCMCpack')
set.seed(1)
setwd('U:\\GIT_models\\cluster_tsegments_loc')
sourceCpp('aux1.cpp')
source('gibbs functions.R')
source('gibbs sampler.R')
dat=read.csv('fake data.csv',as.is=T)
dat=data.matrix(dat)
#priors
psi=0.01
gamma1=0.1
#starting values
nclustmax=20
#store results
ngibbs=1000
nburn=ngibbs/2
res=cluster_tsegments_loc(psi=psi,gamma1=gamma1,nclustmax=nclustmax,
dat=dat,ngibbs=ngibbs,nburn=nburn)
plot(res$phi[ngibbs,],type='h')
fim=data.frame(zestim=res$z[ngibbs,],ztrue=z.true)
set.seed(3)
nobs=1000
nloc=150
nclust=10
z.true=z=sample(1:nclust,size=nobs,replace=T)
theta.true=theta=rdirichlet(nclust,rep(0.01,nloc))
image(theta.true)
n=round(runif(nobs,min=50,max=250))
obs=matrix(NA,nobs,nloc)
for (i in 1:nobs){
tmp=theta[z[i],]
obs[i,]=rmultinom(1,size=n[i],prob=tmp)
}
image(obs)
rowSums(obs)[1:5]
n[1:5]
fim=data.frame(zestim=res$z[ngibbs,],ztrue=z.true)
fim1=table(fim); fim1
fim=data.frame(zestim=res$z[ngibbs,],ztrue=z.true)
fim1=table(fim); fim1
ordem=numeric()
for (i in 1:ncol(fim1)){
ind=which(fim1[i,]==max(fim1[i,]))
ordem=c(ordem,ind)
}
ind
fim=data.frame(zestim=res$z[ngibbs,],ztrue=z.true)
fim1=table(fim); fim1
ordem=numeric()
for (i in 1:ncol(fim1)){
ind=which(fim1[i,]==max(fim1[i,]))
ordem=c(ordem,ind)
}
ordem
fim1[ordem,]
fim1
fim=data.frame(zestim=res$z[ngibbs,],ztrue=z.true)
fim1=table(fim); fim1
ordem=numeric()
for (i in 1:ncol(fim1)){
ind=which(fim1[,i]==max(fim1[,i]))
ordem=c(ordem,ind)
}
fim1[ordem,]
compare=function(true1,estim1){
rango=range(c(true1,estim1))
plot(true1,estim1,ylim=rango,xlim=rango)
lines(rango,rango,col='red')
}
theta1=matrix(res$theta[ngibbs,],nrow=nclustmax)
compare(theta1.true,theta1[ordem,])
theta1=matrix(res$theta[ngibbs,],nrow=nclustmax)
compare(theta.true,theta1[ordem,])
rm(list=ls(all=TRUE))
library('MCMCpack')
set.seed(3)
nobs=1000
nloc=150
nclust=5
z.true=z=sample(1:nclust,size=nobs,replace=T)
theta.true=theta=rdirichlet(nclust,rep(0.01,nloc))
image(theta.true)
n=round(runif(nobs,min=50,max=250))
obs=matrix(NA,nobs,nloc)
for (i in 1:nobs){
tmp=theta[z[i],]
obs[i,]=rmultinom(1,size=n[i],prob=tmp)
}
image(obs)
rowSums(obs)[1:5]
n[1:5]
setwd('U:\\GIT_models\\cluster_tsegments_loc')
write.csv(obs,'fake data.csv',row.names=F)
rm(list=ls(all=TRUE))
library('Rcpp')
library('MCMCpack')
set.seed(1)
setwd('U:\\GIT_models\\cluster_tsegments_loc')
sourceCpp('aux1.cpp')
source('gibbs functions.R')
source('gibbs sampler.R')
dat=read.csv('fake data.csv',as.is=T)
dat=data.matrix(dat)
#priors
psi=0.01
gamma1=0.1
#starting values
nclustmax=20
#store results
ngibbs=1000
nburn=ngibbs/2
res=cluster_tsegments_loc(psi=psi,gamma1=gamma1,nclustmax=nclustmax,
dat=dat,ngibbs=ngibbs,nburn=nburn)
plot(res$phi[ngibbs,],type='h')
fim=data.frame(zestim=res$z[ngibbs,],ztrue=z.true)
fim1=table(fim); fim1
ordem=numeric()
for (i in 1:ncol(fim1)){
ind=which(fim1[,i]==max(fim1[,i]))
ordem=c(ordem,ind)
}
fim1[ordem,]
library('MCMCpack')
set.seed(3)
nobs=1000
nloc=150
nclust=5
z.true=z=sample(1:nclust,size=nobs,replace=T)
theta.true=theta=rdirichlet(nclust,rep(0.01,nloc))
image(theta.true)
n=round(runif(nobs,min=50,max=250))
obs=matrix(NA,nobs,nloc)
for (i in 1:nobs){
tmp=theta[z[i],]
obs[i,]=rmultinom(1,size=n[i],prob=tmp)
}
image(obs)
rowSums(obs)[1:5]
n[1:5]
fim=data.frame(zestim=res$z[ngibbs,],ztrue=z.true)
fim1=table(fim); fim1
ordem=numeric()
for (i in 1:ncol(fim1)){
ind=which(fim1[,i]==max(fim1[,i]))
ordem=c(ordem,ind)
}
fim1[ordem,]
compare=function(true1,estim1){
rango=range(c(true1,estim1))
plot(true1,estim1,ylim=rango,xlim=rango)
lines(rango,rango,col='red')
}
theta1=matrix(res$theta[ngibbs,],nrow=nclustmax)
compare(theta.true,theta1[ordem,])
rm(list=ls(all=TRUE))
library('Rcpp')
library('MCMCpack')
set.seed(1)
setwd('U:\\GIT_models\\cluster_tsegments_loc')
sourceCpp('aux1.cpp')
source('gibbs functions.R')
source('gibbs sampler.R')
dat=read.csv('fake data.csv',as.is=T)
dat=data.matrix(dat)
#priors
psi=0.01
gamma1=0.1
#starting values
nclustmax=20
#store results
ngibbs=1000
nburn=ngibbs/2
rm(list=ls(all=TRUE))
library('Rcpp')
library('MCMCpack')
set.seed(1)
setwd('U:\\GIT_models\\cluster_tsegments_loc')
sourceCpp('aux1.cpp')
source('gibbs functions.R')
source('gibbs sampler.R')
//' This function gets log-probab for existing groups (useful to sample z)
// [[Rcpp::export]]
NumericMatrix GetLoglikel(NumericMatrix ltheta, NumericVector lphi,
int nobs, int nloc, int nclustmax,
IntegerMatrix dat){
NumericMatrix LogLikel(nobs,nclustmax);
for (int i=0; i<nobs; i++){
for (int k=0; k<nclustmax; k++){
for (int l=0; l<nloc; l++){
LogLikel(i,k)=LogLikel(i,k)+dat(i,l)*ltheta(i,l);
}
LogLikel(i,k)=LogLikel(i,k)+lphi[i];
}
}
return LogLikel;
}
rm(list=ls(all=TRUE))
library('Rcpp')
library('MCMCpack')
set.seed(1)
setwd('U:\\GIT_models\\cluster_tsegments_loc')
sourceCpp('aux1.cpp')
source('gibbs functions.R')
source('gibbs sampler.R')
dat=read.csv('fake data.csv',as.is=T)
dat=data.matrix(dat)
#priors
psi=0.01
gamma1=0.1
#starting values
nclustmax=20
#store results
ngibbs=1000
nburn=ngibbs/2
n=rowSums(dat)
nobs=nrow(dat)
nloc=ncol(dat)
lo=0.000000000000001
#starting values
z=sample(1:nclustmax,size=nobs,replace=T)
theta=matrix(1/nloc,nclustmax,nloc)
phi=rep(1/nclustmax,nclustmax)
#store results
store.phi=matrix(NA,ngibbs,nclustmax)
store.z=matrix(NA,ngibbs,nobs)
store.theta=matrix(NA,ngibbs,nclustmax*nloc)
store.loglikel=matrix(NA,ngibbs,1)
ltheta=log(theta)
lphi=log(phi)
#determine the number of locations in each group
tab=rep(0,nclustmax)
tmp=table(z)
tab[as.numeric(names(tmp))]=tmp
#calculate log-probability
tmp=matrix(NA,nobs,nclustmax)
for (i in 1:nclustmax){
ltheta1=matrix(ltheta[i,],nobs,nloc,byrow=T)
tmp[,i]=rowSums(dat*ltheta1)+lphi[i]
}
tmp1=GetLoglikel(ltheta=ltheta, lphi=lphi,
nobs=nobs, nloc=nloc, nclustmax=nclustmax,
dat=dat)
unique(tmp1-tmp)
hist(tmp1-tmp)
rm(list=ls(all=TRUE))
library('Rcpp')
library('MCMCpack')
set.seed(1)
setwd('U:\\GIT_models\\cluster_tsegments_loc')
sourceCpp('aux1.cpp')
source('gibbs functions.R')
source('gibbs sampler.R')
dat=read.csv('fake data.csv',as.is=T)
dat=data.matrix(dat)
#priors
psi=0.01
gamma1=0.1
#starting values
nclustmax=20
#store results
ngibbs=1000
nburn=ngibbs/2
n=rowSums(dat)
nobs=nrow(dat)
nloc=ncol(dat)
lo=0.000000000000001
#starting values
z=sample(1:nclustmax,size=nobs,replace=T)
theta=matrix(1/nloc,nclustmax,nloc)
phi=rep(1/nclustmax,nclustmax)
#store results
store.phi=matrix(NA,ngibbs,nclustmax)
store.z=matrix(NA,ngibbs,nobs)
store.theta=matrix(NA,ngibbs,nclustmax*nloc)
store.loglikel=matrix(NA,ngibbs,1)
ltheta=log(theta)
lphi=log(phi)
#determine the number of locations in each group
tab=rep(0,nclustmax)
tmp=table(z)
tab[as.numeric(names(tmp))]=tmp
#calculate log-probability
tmp=matrix(NA,nobs,nclustmax)
for (i in 1:nclustmax){
ltheta1=matrix(ltheta[i,],nobs,nloc,byrow=T)
tmp[,i]=rowSums(dat*ltheta1)+lphi[i]
}
tmp1=GetLoglikel(ltheta=ltheta, lphi=lphi,
nobs=nobs, nloc=nloc, nclustmax=nclustmax,
dat=dat)
unique(tmp-tmp1)
hist(tmp-tmp1)
rm(list=ls(all=TRUE))
library('Rcpp')
library('MCMCpack')
set.seed(1)
setwd('U:\\GIT_models\\cluster_tsegments_loc')
sourceCpp('aux1.cpp')
source('gibbs functions.R')
source('gibbs sampler.R')
dat=read.csv('fake data.csv',as.is=T)
dat=data.matrix(dat)
#priors
psi=0.01
gamma1=0.1
#starting values
nclustmax=20
#store results
ngibbs=1000
nburn=ngibbs/2
res=cluster_tsegments_loc(psi=psi,gamma1=gamma1,nclustmax=nclustmax,
dat=dat,ngibbs=ngibbs,nburn=nburn)
microbenchmark(
z=sample.z(dat=dat,theta=theta,phi=phi,
nobs=nobs,nclustmax=nclustmax,nloc=nloc,z=z,n=n),
v=sample.v(z=z,nclustmax=nclustmax,gamma1=gamma1),
phi=GetPhi(vec=c(v,1),nclustmax=nclustmax),
theta=sample.theta(dat=dat,nclustmax=nclustmax,nloc=nloc,z=z,psi=psi)
#to avoid numerical issues
)
z=sample.z(dat=dat,theta=theta,phi=phi,
nobs=nobs,nclustmax=nclustmax,nloc=nloc,z=z,n=n)
n=rowSums(dat)
nobs=nrow(dat)
nloc=ncol(dat)
lo=0.000000000000001
#starting values
z=sample(1:nclustmax,size=nobs,replace=T)
theta=matrix(1/nloc,nclustmax,nloc)
phi=rep(1/nclustmax,nclustmax)
#store results
store.phi=matrix(NA,ngibbs,nclustmax)
store.z=matrix(NA,ngibbs,nobs)
store.theta=matrix(NA,ngibbs,nclustmax*nloc)
store.loglikel=matrix(NA,ngibbs,1)
z=sample.z(dat=dat,theta=theta,phi=phi,
nobs=nobs,nclustmax=nclustmax,nloc=nloc,z=z,n=n)
v=sample.v(z=z,nclustmax=nclustmax,gamma1=gamma1)
microbenchmark(
z=sample.z(dat=dat,theta=theta,phi=phi,
nobs=nobs,nclustmax=nclustmax,nloc=nloc,z=z,n=n),
v=sample.v(z=z,nclustmax=nclustmax,gamma1=gamma1),
phi=GetPhi(vec=c(v,1),nclustmax=nclustmax),
theta=sample.theta(dat=dat,nclustmax=nclustmax,nloc=nloc,z=z,psi=psi)
#to avoid numerical issues
)
rm(list=ls(all=TRUE))
library('Rcpp')
library('MCMCpack')
set.seed(1)
setwd('U:\\GIT_models\\cluster_tsegments_loc')
sourceCpp('aux1.cpp')
source('gibbs functions.R')
source('gibbs sampler.R')
dat=read.csv('fake data.csv',as.is=T)
dat=data.matrix(dat)
#priors
psi=0.01
gamma1=0.1
#starting values
nclustmax=20
#store results
ngibbs=1000
nburn=ngibbs/2
res=cluster_tsegments_loc(psi=psi,gamma1=gamma1,nclustmax=nclustmax,
dat=dat,ngibbs=ngibbs,nburn=nburn)
library('MCMCpack')
set.seed(3)
nobs=1000
nloc=150
nclust=5
z.true=z=sample(1:nclust,size=nobs,replace=T)
theta.true=theta=rdirichlet(nclust,rep(0.01,nloc))
image(theta.true)
n=round(runif(nobs,min=50,max=250))
obs=matrix(NA,nobs,nloc)
for (i in 1:nobs){
tmp=theta[z[i],]
obs[i,]=rmultinom(1,size=n[i],prob=tmp)
}
image(obs)
rowSums(obs)[1:5]
n[1:5]
plot(res$phi[ngibbs,],type='h')
fim=data.frame(zestim=res$z[ngibbs,],ztrue=z.true)
fim1=table(fim); fim1
ordem=numeric()
for (i in 1:ncol(fim1)){
ind=which(fim1[,i]==max(fim1[,i]))
ordem=c(ordem,ind)
}
fim1[ordem,]
compare=function(true1,estim1){
rango=range(c(true1,estim1))
plot(true1,estim1,ylim=rango,xlim=rango)
lines(rango,rango,col='red')
}
theta1=matrix(res$theta[ngibbs,],nrow=nclustmax)
compare(theta.true,theta1[ordem,])
rm(list=ls(all=TRUE))
library('MCMCpack')
set.seed(3)
nobs=1000
nloc=150
nclust=12
z.true=z=sample(1:nclust,size=nobs,replace=T)
theta.true=theta=rdirichlet(nclust,rep(0.01,nloc))
image(theta.true)
n=round(runif(nobs,min=50,max=250))
obs=matrix(NA,nobs,nloc)
for (i in 1:nobs){
tmp=theta[z[i],]
obs[i,]=rmultinom(1,size=n[i],prob=tmp)
}
image(obs)
rowSums(obs)[1:5]
n[1:5]
setwd('U:\\GIT_models\\cluster_tsegments_loc')
write.csv(obs,'fake data.csv',row.names=F)
rm(list=ls(all=TRUE))
library('Rcpp')
library('MCMCpack')
set.seed(1)
setwd('U:\\GIT_models\\cluster_tsegments_loc')
sourceCpp('aux1.cpp')
source('gibbs functions.R')
source('gibbs sampler.R')
dat=read.csv('fake data.csv',as.is=T)
dat=data.matrix(dat)
#priors
psi=0.01
gamma1=0.1
#starting values
nclustmax=20
#store results
ngibbs=1000
nburn=ngibbs/2
res=cluster_tsegments_loc(psi=psi,gamma1=gamma1,nclustmax=nclustmax,
dat=dat,ngibbs=ngibbs,nburn=nburn)
rm(list=ls(all=TRUE))
library('MCMCpack')
set.seed(30)
nobs=1000
nloc=150
nclust=12
z.true=z=sample(1:nclust,size=nobs,replace=T)
theta.true=theta=rdirichlet(nclust,rep(0.01,nloc))
image(theta.true)
n=round(runif(nobs,min=50,max=250))
obs=matrix(NA,nobs,nloc)
for (i in 1:nobs){
tmp=theta[z[i],]
obs[i,]=rmultinom(1,size=n[i],prob=tmp)
}
image(obs)
rowSums(obs)[1:5]
n[1:5]
setwd('U:\\GIT_models\\cluster_tsegments_loc')
write.csv(obs,'fake data.csv',row.names=F)
rm(list=ls(all=TRUE))
library('Rcpp')
library('MCMCpack')
set.seed(1)
setwd('U:\\GIT_models\\cluster_tsegments_loc')
sourceCpp('aux1.cpp')
source('gibbs functions.R')
source('gibbs sampler.R')
dat=read.csv('fake data.csv',as.is=T)
dat=data.matrix(dat)
#priors
psi=0.01
gamma1=0.1
#starting values
nclustmax=20
#store results
ngibbs=1000
nburn=ngibbs/2
res=cluster_tsegments_loc(psi=psi,gamma1=gamma1,nclustmax=nclustmax,
dat=dat,ngibbs=ngibbs,nburn=nburn)
set.seed(30)
nobs=1000
nloc=150
nclust=12
z.true=z=sample(1:nclust,size=nobs,replace=T)
theta.true=theta=rdirichlet(nclust,rep(0.01,nloc))
image(theta.true)
n=round(runif(nobs,min=50,max=250))
obs=matrix(NA,nobs,nloc)
for (i in 1:nobs){
tmp=theta[z[i],]
obs[i,]=rmultinom(1,size=n[i],prob=tmp)
}
image(obs)
rowSums(obs)[1:5]
n[1:5]
plot(res$phi[ngibbs,],type='h')
fim=data.frame(zestim=res$z[ngibbs,],ztrue=z.true)
fim1=table(fim); fim1
ordem=numeric()
for (i in 1:ncol(fim1)){
ind=which(fim1[,i]==max(fim1[,i]))
ordem=c(ordem,ind)
}
fim1[ordem,]
compare=function(true1,estim1){
rango=range(c(true1,estim1))
plot(true1,estim1,ylim=rango,xlim=rango)
lines(rango,rango,col='red')
}
theta1=matrix(res$theta[ngibbs,],nrow=nclustmax)
compare(theta.true,theta1[ordem,])
